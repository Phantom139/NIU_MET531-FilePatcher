#include "includes.h"
#include "tools.h"

#ifndef CREATETT_H
#define CREATETT_H

//createThresholdTable(): Command "3": Create a threshold table file using the scores generated by "2".
void createThresholdTable(string &curLine, fstream *in, string oName) {
	//Define Specific Parameters
	bool read = false, okOpen = false;
	size_t tPos, tPos2;
	string temp, temp2;
	int month, day, index, score, yr = -1;
	int dailyScore1[366] = { 0 };
	int dailyScore2[366] = { 0 };
	int dailyScore3[366] = { 0 };
	int totalScore[366] = { 0 };
	vector<string> repLine;
	//end
	while (!in->eof()) {
		getline(*in, curLine);
		//std::cout << curLine.c_str() << endl;
		if (!okOpen) {
			//Check first line for "PATCHED"
			if (strcmp(curLine.c_str(), "PATCHED") != 0) {
				std::cout << "Cannot perform post-fix on unpatched file, break." << endl;
				break;
			}
			else {
				std::cout << "Patched file detected, proceeding..." << endl;
				okOpen = true;
			}
		}
		repLine.push_back(curLine);
	}
	if (okOpen) {
		//Using the repLine grouping, sort by each individual day.
		for (int i = 0; i < repLine.size(); i++) {
			curLine = repLine[i];
			if (strcmp(curLine.c_str(), "END,") == 0) {
				std::cout << "End Point Found..." << endl;
				read = false;
			}
			//If we need to read the line, then do it.
			if (read) {
				index = 0;
				Tools::splitMD(curLine, &day, &month, &yr);
				for (int y = 0; y < month - 1; y++) {
					index += constants::dim[y];
				}
				index += day - 1;
				totalScore[index] += 1;
				//Find the scores for this line...
				tPos = curLine.find(",");
				tPos = curLine.find(",", tPos + 1);
				tPos = curLine.find(",", tPos + 1);
				tPos = curLine.find(",", tPos + 1);
				tPos = curLine.find(",", tPos + 1);
				tPos = curLine.find(",", tPos + 1);
				tPos = curLine.find(",", tPos + 1);
				tPos = curLine.find(",", tPos + 1);
				tPos = curLine.find(",", tPos + 1);
				tPos2 = curLine.find(",", tPos + 1);
				//Score 1
				score = atoi(curLine.substr(tPos + 1, tPos2 - (tPos + 1)).c_str());
				dailyScore1[index] += score;
				//Score 2
				tPos = curLine.find(",", tPos2 + 1);
				score = atoi(curLine.substr(tPos2 + 1, tPos - (tPos2 + 1)).c_str());
				dailyScore2[index] += score;
				//Score 3
				tPos2 = curLine.find(",", tPos + 1);
				score = atoi(curLine.substr(tPos + 1, tPos2 - (tPos + 1)).c_str());
				dailyScore3[index] += score;
			}
			//
			if (strcmp(curLine.c_str(), "START,") == 0) {
				std::cout << "Starting Point Found..." << endl;
				read = true;
			}
		}
		std::cout << "Opening file: " << oName.c_str() << endl;
		fstream out(oName.c_str(), ios::out);
		out << "Threshold Analysis,\nDay,Total Score (9F),Total Score (0F),Total Score (-10F),Maximum Score,Probability (9F),Probability (0F),Probability (-10F),\n";
		for (int i = 0; i < 12; i++) {
			for (int k = 0; k < constants::dim[i]; k++) {
				index = 0;
				for (int l = 0; l < i; l++) {
					index += constants::dim[l];
				}
				index += k;
				out << (i + 1 < 10 ? "0" : "") << i + 1 << "/" << k + 1 << " (" << index << ")," << dailyScore1[index] << "," << dailyScore2[index]
					<< "," << dailyScore3[index] << "," << totalScore[index] << "," << ((double)dailyScore1[index] / (double)totalScore[index]) * 100
					<< "," << ((double)dailyScore2[index] / (double)totalScore[index]) * 100 << ","
					<< ((double)dailyScore3[index] / (double)totalScore[index]) * 100 << "\n";
			}
		}
		out.close();
	}
	else {
		std::cout << "Failed Post-Analysis" << endl;
	}
	std::cout << "Command '3' Completed..." << endl << endl;
}

#endif